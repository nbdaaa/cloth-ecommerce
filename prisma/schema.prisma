// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              Role      @default(USER)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  accounts          Account[]
  carts             Cart[]
  orders            Order[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Product model
model Product {
  id                String    @id @default(cuid())
  name              String
  description       String
  price             Float
  salePrice         Float?
  inventory         Int       @default(0)
  isFeatured        Boolean   @default(false)
  isArchived        Boolean   @default(false)
  categoryId        String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  category          Category  @relation(fields: [categoryId], references: [id])
  images            Image[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
}

// Category model
model Category {
  id                String    @id @default(cuid())
  name              String
  description       String?
  parentId          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  parent            Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories     Category[] @relation("CategoryToSubcategory")
  products          Product[]
}

// Order model
model Order {
  id                String    @id @default(cuid())
  userId            String
  status            OrderStatus @default(PENDING)
  total             Float
  paymentIntentId   String?   @unique
  shippingAddress   String?
  phone             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

// Order Item model
model OrderItem {
  id                String    @id @default(cuid())
  orderId           String
  productId         String
  quantity          Int
  price             Float
  
  // Relations
  order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id])
}

// Review model
model Review {
  id                String    @id @default(cuid())
  userId            String
  productId         String
  rating            Int
  comment           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Cart model
model Cart {
  id                String    @id @default(cuid())
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems         CartItem[]
}

// Cart Item model
model CartItem {
  id                String    @id @default(cuid())
  cartId            String
  productId         String
  quantity          Int
  
  // Relations
  cart              Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id])
}

// Image model for product images
model Image {
  id                String    @id @default(cuid())
  productId         String
  url               String
  alt               String?
  isPrimary         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Wishlist Item model
model WishlistItem {
  id                String    @id @default(cuid())
  userId            String
  productId         String
  createdAt         DateTime  @default(now())
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
